crossplane:
  image:
    # -- Crossplane image.
    repository: upbound/crossplane
    # -- Crossplane image tag: if not set, appVersion field from Chart.yaml is used.
    tag: "v1.12.1-up.1"

  registryCaBundleConfig:
    # -- Name of ConfigMap containing additional CA bundle for fetching from package registries.
    name: {}
    # -- Key to use from ConfigMap containing additional CA bundle for fetching from package registries.
    key: {}

  resourcesCrossplane:
    limits:
      # -- CPU resource limits for Crossplane.
      cpu: 100m
      # -- Memory resource limits for Crossplane.
      memory: 512Mi
    requests:
      # -- CPU resource requests for Crossplane.
      cpu: 100m
      # -- Memory resource requests for Crossplane.
      memory: 256Mi

  packageCache:
    # -- Storage medium for package cache. `Memory` means volume will be backed by tmpfs, which can be useful for development.
    medium: ""
    # -- Size limit for package cache. If medium is `Memory` then maximum usage would be the minimum of this value the sum of all memory limits on containers in the Crossplane pod.
    sizeLimit: 20Mi
    # -- Name of the PersistentVolumeClaim to be used as the package cache. Providing a value will cause the default emptyDir volume to not be mounted.
    pvc: ""
    # -- Name of the ConfigMap to be used as package cache. Providing a value will cause the default emptyDir volume not to be mounted.
    configMap: ""

  resourcesRBACManager:
    limits:
      # -- CPU resource limits for RBAC Manager.
      cpu: 100m
      # -- Memory resource limits for RBAC Manager.
      memory: 512Mi
    requests:
      # -- CPU resource requests for RBAC Manager.
      cpu: 100m
      # -- Memory resource requests for RBAC Manager.
      memory: 256Mi

  xfn:
    # -- Enable alpha xfn sidecar container that runs Composition Functions. Note you also
    # need to run Crossplane with --enable-composition-functions for it to call xfn.
    enabled: false
    # -- Image for xfn: if tag is not set appVersion field from Chart.yaml is used.
    image:
      repository: upbound/xfn
      tag: "v1.12.1-up.1"
      pullPolicy: IfNotPresent
    # -- Resources definition for xfn.
    resources:
      limits:
        # -- CPU resource limits for RBAC Manager.
        cpu: 2000m
        # -- Memory resource limits for RBAC Manager.
        memory: 2Gi
      requests:
        # -- CPU resource requests for RBAC Manager.
        cpu: 1000m
        # -- Memory resource requests for RBAC Manager.
        memory: 1Gi

### Bootstrapper Values

bootstrapper:
  image:
    repository: xpkg.upbound.io/upbound/uxp-bootstrapper
    tag: ""
    pullPolicy: IfNotPresent
  resources: {}
  config:
    debugMode: false
    args: []
    envVars: {}
    # List of extra environment variables to set in the bootstrapper deployment.
    # EXAMPLE
    # envVars:
    #   sample.key: value1
    #   ANOTHER.KEY: value2
    # RESULT
    #   - name: sample_key
    #     value: "value1"
    #   - name: ANOTHER_KEY
    #     value: "value2"

billing:
  awsMarketplace:
    enabled: false
    iamRoleARN: arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>

nameOverride: "crossplane"

upbound:
  controlPlane:
    permission: edit
